 app/cmd/acme.go          |  2 +-
 app/cmd/client.go        | 46 ++++++++++++++++++++++------------------------
 app/cmd/client_gpl.go    |  2 +-
 app/cmd/client_nongpl.go |  2 +-
 app/cmd/completion.go    |  2 +-
 app/cmd/config.go        |  2 +-
 app/cmd/config_test.go   |  2 +-
 app/cmd/ipmasker.go      |  2 +-
 app/cmd/kploader.go      |  2 +-
 app/cmd/main.go          | 44 +++++++++++++++++++++++++++++++++++++++++---
 app/cmd/mmdb.go          |  2 +-
 app/cmd/prom.go          |  2 +-
 app/cmd/resolver.go      |  2 +-
 app/cmd/server.go        |  2 +-
 app/cmd/update.go        |  2 +-
 15 files changed, 76 insertions(+), 40 deletions(-)

diff --git a/app/cmd/acme.go b/app/cmd/acme.go
index 9b2a26a..4c8657f 100644
--- a/app/cmd/acme.go
+++ b/app/cmd/acme.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"context"
diff --git a/app/cmd/client.go b/app/cmd/client.go
index 3f51e86..aca0b39 100644
--- a/app/cmd/client.go
+++ b/app/cmd/client.go
@@ -1,11 +1,10 @@
-package main
+package hysteria
 
 import (
 	"crypto/tls"
 	"crypto/x509"
 	"errors"
 	"io"
-	"io/ioutil"
 	"net"
 	"net/http"
 	"os"
@@ -59,18 +58,17 @@ func client(config *clientConfig) {
 	}
 	// Load CA
 	if len(config.CustomCA) > 0 {
-		bs, err := ioutil.ReadFile(config.CustomCA)
-		if err != nil {
-			logrus.WithFields(logrus.Fields{
-				"error": err,
-				"file":  config.CustomCA,
-			}).Fatal("Failed to load CA")
-		}
+		// bs, err := ioutil.ReadFile(config.CustomCA)
+		// if err != nil {
+		// 	logrus.WithFields(logrus.Fields{
+		// 		"error": err,
+		// 		"file":  config.CustomCA,
+		// 	}).Fatal("Failed to load CA")
+		// }
+		bs := []byte(config.CustomCA)
 		cp := x509.NewCertPool()
 		if !cp.AppendCertsFromPEM(bs) {
-			logrus.WithFields(logrus.Fields{
-				"file": config.CustomCA,
-			}).Fatal("Failed to parse CA")
+			logrus.Error("Failed to parse CA")
 		}
 		tlsConfig.RootCAs = cp
 	}
@@ -101,7 +99,7 @@ func client(config *clientConfig) {
 	if pktConnFuncFactory == nil {
 		logrus.WithFields(logrus.Fields{
 			"protocol": config.Protocol,
-		}).Fatal("Unsupported protocol")
+		}).Error("Unsupported protocol")
 	}
 	pktConnFunc := pktConnFuncFactory(config.Obfs, time.Duration(config.HopInterval)*time.Second)
 	// Resolve preference
@@ -126,7 +124,7 @@ func client(config *clientConfig) {
 			logrus.WithFields(logrus.Fields{
 				"error": err,
 				"file":  config.ACL,
-			}).Fatal("Failed to parse ACL")
+			}).Error("Failed to parse ACL")
 		}
 	}
 	// Client
@@ -142,7 +140,7 @@ func client(config *clientConfig) {
 					logrus.WithFields(logrus.Fields{
 						"addr":  config.Server,
 						"error": err,
-					}).Fatal("Connection to server lost, exiting...")
+					}).Error("Connection to server lost, exiting...")
 				} else {
 					logrus.WithFields(logrus.Fields{
 						"addr":  config.Server,
@@ -163,7 +161,7 @@ func client(config *clientConfig) {
 				}).Info("Retrying...")
 				time.Sleep(time.Duration(retryInterval) * time.Second)
 			} else {
-				logrus.Fatal("Out of retries, exiting...")
+				logrus.Error("Out of retries, exiting...")
 			}
 		} else {
 			client = c
@@ -228,7 +226,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize SOCKS5 server")
+				logrus.WithField("error", err).Error("Failed to initialize SOCKS5 server")
 			}
 			logrus.WithField("addr", config.SOCKS5.Listen).Info("SOCKS5 server up and running")
 			errChan <- socks5server.ListenAndServe()
@@ -258,7 +256,7 @@ func client(config *clientConfig) {
 					}).Info("HTTP error")
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize HTTP server")
+				logrus.WithField("error", err).Error("Failed to initialize HTTP server")
 			}
 			if config.HTTP.Cert != "" && config.HTTP.Key != "" {
 				logrus.WithField("addr", config.HTTP.Listen).Info("HTTPS server up and running")
@@ -305,7 +303,7 @@ func client(config *clientConfig) {
 						}
 					})
 				if err != nil {
-					logrus.WithField("error", err).Fatal("Failed to initialize TCP relay")
+					logrus.WithField("error", err).Error("Failed to initialize TCP relay")
 				}
 				logrus.WithField("addr", tcpr.Listen).Info("TCP relay up and running")
 				errChan <- rl.ListenAndServe()
@@ -344,7 +342,7 @@ func client(config *clientConfig) {
 						}
 					})
 				if err != nil {
-					logrus.WithField("error", err).Fatal("Failed to initialize UDP relay")
+					logrus.WithField("error", err).Error("Failed to initialize UDP relay")
 				}
 				logrus.WithField("addr", udpr.Listen).Info("UDP relay up and running")
 				errChan <- rl.ListenAndServe()
@@ -377,7 +375,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize TCP TProxy")
+				logrus.WithField("error", err).Error("Failed to initialize TCP TProxy")
 			}
 			logrus.WithField("addr", config.TCPTProxy.Listen).Info("TCP TProxy up and running")
 			errChan <- rl.ListenAndServe()
@@ -409,7 +407,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize UDP TProxy")
+				logrus.WithField("error", err).Error("Failed to initialize UDP TProxy")
 			}
 			logrus.WithField("addr", config.UDPTProxy.Listen).Info("UDP TProxy up and running")
 			errChan <- rl.ListenAndServe()
@@ -441,7 +439,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize TCP Redirect")
+				logrus.WithField("error", err).Error("Failed to initialize TCP Redirect")
 			}
 			logrus.WithField("addr", config.TCPRedirect.Listen).Info("TCP Redirect up and running")
 			errChan <- rl.ListenAndServe()
@@ -449,7 +447,7 @@ func client(config *clientConfig) {
 	}
 
 	err := <-errChan
-	logrus.WithField("error", err).Fatal("Client shutdown")
+	logrus.WithField("error", err).Error("Client shutdown")
 }
 
 func parseClientConfig(cb []byte) (*clientConfig, error) {
diff --git a/app/cmd/client_gpl.go b/app/cmd/client_gpl.go
index dd5dad2..57c9c01 100644
--- a/app/cmd/client_gpl.go
+++ b/app/cmd/client_gpl.go
@@ -1,7 +1,7 @@
 //go:build gpl
 // +build gpl
 
-package main
+package hysteria
 
 import (
 	"io"
diff --git a/app/cmd/client_nongpl.go b/app/cmd/client_nongpl.go
index 417159b..60e4ee6 100644
--- a/app/cmd/client_nongpl.go
+++ b/app/cmd/client_nongpl.go
@@ -1,7 +1,7 @@
 //go:build !gpl
 // +build !gpl
 
-package main
+package hysteria
 
 import (
 	"github.com/apernet/hysteria/core/cs"
diff --git a/app/cmd/completion.go b/app/cmd/completion.go
index ea6bbed..8d1ff78 100644
--- a/app/cmd/completion.go
+++ b/app/cmd/completion.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"fmt"
diff --git a/app/cmd/config.go b/app/cmd/config.go
index 67b30f0..2cacc57 100644
--- a/app/cmd/config.go
+++ b/app/cmd/config.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"errors"
diff --git a/app/cmd/config_test.go b/app/cmd/config_test.go
index 11006ba..6966ceb 100644
--- a/app/cmd/config_test.go
+++ b/app/cmd/config_test.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import "testing"
 
diff --git a/app/cmd/ipmasker.go b/app/cmd/ipmasker.go
index 97a1d13..930cfa1 100644
--- a/app/cmd/ipmasker.go
+++ b/app/cmd/ipmasker.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"net"
diff --git a/app/cmd/kploader.go b/app/cmd/kploader.go
index 5d6f60e..11a687a 100644
--- a/app/cmd/kploader.go
+++ b/app/cmd/kploader.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"crypto/tls"
diff --git a/app/cmd/main.go b/app/cmd/main.go
index 36ef82c..3b10aa2 100644
--- a/app/cmd/main.go
+++ b/app/cmd/main.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"fmt"
@@ -6,8 +6,10 @@ import (
 	"math/rand"
 	"net"
 	"os"
+	"os/signal"
 	"regexp"
 	"strings"
+	"syscall"
 	"time"
 
 	nested "github.com/antonfisher/nested-logrus-formatter"
@@ -33,12 +35,16 @@ var (
 	appDate    = "Unknown"
 )
 
+// channel so we can exit gracefully
+var sigChan = make(chan os.Signal, 1)
+
 var rootCmd = &cobra.Command{
 	Use:     "hysteria",
 	Long:    fmt.Sprintf("%s%s\n\nVersion:\t%s\nBuildDate:\t%s\nCommitHash:\t%s\nAuthors:\t%s", logo, desc, appVersion, appDate, appCommit, authors),
 	Example: "./hysteria server --config /etc/hysteria.json",
 	Version: fmt.Sprintf("%s %s %s", appVersion, appDate, appCommit),
 	PersistentPreRun: func(cmd *cobra.Command, args []string) {
+		signal.Notify(sigChan, syscall.SIGTERM)
 		rand.Seed(time.Now().UnixNano())
 
 		// log config
@@ -203,6 +209,38 @@ func init() {
 	viper.AutomaticEnv()
 }
 
-func main() {
-	cobra.CheckErr(rootCmd.Execute())
+// func main() {
+// 	cobra.CheckErr(rootCmd.Execute())
+// }
+
+func Start(configJson *[]byte) {
+	// log config
+	logrus.SetOutput(os.Stdout)
+	// XXX:
+	logrus.SetLevel(logrus.ErrorLevel)
+
+	logrus.SetFormatter(&nested.Formatter{
+		FieldsOrder: []string{
+			"version", "url",
+			"config", "file", "mode",
+			"addr", "src", "dst", "session", "action",
+			"retry", "interval",
+			"code", "msg", "error",
+		},
+		TimestampFormat: viper.GetString("log-timestamp"),
+	})
+
+	// client mode
+	cc, err := parseClientConfig(*configJson)
+	if err != nil {
+		logrus.WithFields(logrus.Fields{
+			"error": err,
+		}).Fatal("Failed to parse client configuration")
+	}
+	client(cc)
 }
+
+func Stop() {
+	logrus.Info("synthesizing SIGTERM because of explicit Stop call")
+	sigChan <- syscall.SIGTERM
+}
\ No newline at end of file
diff --git a/app/cmd/mmdb.go b/app/cmd/mmdb.go
index f35185d..d8cd643 100644
--- a/app/cmd/mmdb.go
+++ b/app/cmd/mmdb.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"io"
diff --git a/app/cmd/prom.go b/app/cmd/prom.go
index f29926b..4ff0c78 100644
--- a/app/cmd/prom.go
+++ b/app/cmd/prom.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"github.com/apernet/hysteria/core/cs"
diff --git a/app/cmd/resolver.go b/app/cmd/resolver.go
index 473712c..319d3e1 100644
--- a/app/cmd/resolver.go
+++ b/app/cmd/resolver.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"crypto/tls"
diff --git a/app/cmd/server.go b/app/cmd/server.go
index c6909d3..d2be916 100644
--- a/app/cmd/server.go
+++ b/app/cmd/server.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"crypto/tls"
diff --git a/app/cmd/update.go b/app/cmd/update.go
index cd29595..0f78df0 100644
--- a/app/cmd/update.go
+++ b/app/cmd/update.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"encoding/json"
