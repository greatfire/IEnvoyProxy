 cmd/acme.go        |  2 +-
 cmd/client.go      | 44 ++++++++++++++++++++++----------------------
 cmd/completion.go  |  2 +-
 cmd/config.go      |  2 +-
 cmd/config_test.go |  2 +-
 cmd/kploader.go    |  2 +-
 cmd/main.go        | 45 ++++++++++++++++++++++++++++++++++++++++++---
 cmd/mmdb.go        |  2 +-
 cmd/resolver.go    |  2 +-
 cmd/server.go      |  2 +-
 cmd/update.go      |  2 +-
 11 files changed, 73 insertions(+), 34 deletions(-)

diff --git a/cmd/acme.go b/cmd/acme.go
index c4cf196..c56e852 100644
--- a/cmd/acme.go
+++ b/cmd/acme.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"context"
diff --git a/cmd/client.go b/cmd/client.go
index 69b3ec6..e1a9cfa 100644
--- a/cmd/client.go
+++ b/cmd/client.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"crypto/tls"
@@ -50,18 +50,17 @@ func client(config *clientConfig) {
 	}
 	// Load CA
 	if len(config.CustomCA) > 0 {
-		bs, err := ioutil.ReadFile(config.CustomCA)
-		if err != nil {
-			logrus.WithFields(logrus.Fields{
-				"error": err,
-				"file":  config.CustomCA,
-			}).Fatal("Failed to load CA")
-		}
+		// bs, err := ioutil.ReadFile(config.CustomCA)
+		// if err != nil {
+		// 	logrus.WithFields(logrus.Fields{
+		// 		"error": err,
+		// 		"file":  config.CustomCA,
+		// 	}).Error("Failed to load CA")
+		// }
+		bs := []byte(config.CustomCA)
 		cp := x509.NewCertPool()
 		if !cp.AppendCertsFromPEM(bs) {
-			logrus.WithFields(logrus.Fields{
-				"file": config.CustomCA,
-			}).Fatal("Failed to parse CA")
+			logrus.Error("Failed to parse CA")
 		}
 		tlsConfig.RootCAs = cp
 	}
@@ -104,7 +103,7 @@ func client(config *clientConfig) {
 		if err != nil {
 			logrus.WithFields(logrus.Fields{
 				"error": err,
-			}).Fatal("Failed to parse the resolve preference")
+			}).Error("Failed to parse the resolve preference")
 		}
 		transport.DefaultClientTransport.PrefEnabled = true
 		transport.DefaultClientTransport.PrefIPv6 = pref
@@ -126,7 +125,7 @@ func client(config *clientConfig) {
 			logrus.WithFields(logrus.Fields{
 				"error": err,
 				"file":  config.ACL,
-			}).Fatal("Failed to parse ACL")
+			}).Error("Failed to parse ACL")
 		}
 	}
 	// Client
@@ -149,7 +148,8 @@ func client(config *clientConfig) {
 				}).Info("Retrying...")
 				time.Sleep(time.Duration(config.RetryInterval) * time.Second)
 			} else {
-				logrus.Fatal("Out of retries, exiting...")
+				logrus.Error("Out of retries, exiting...")
+				break
 			}
 		} else {
 			client = c
@@ -210,7 +210,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize SOCKS5 server")
+				logrus.WithField("error", err).Error("Failed to initialize SOCKS5 server")
 			}
 			logrus.WithField("addr", config.SOCKS5.Listen).Info("SOCKS5 server up and running")
 			errChan <- socks5server.ListenAndServe()
@@ -235,7 +235,7 @@ func client(config *clientConfig) {
 				},
 				authFunc)
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize HTTP server")
+				logrus.WithField("error", err).Error("Failed to initialize HTTP server")
 			}
 			if config.HTTP.Cert != "" && config.HTTP.Key != "" {
 				logrus.WithField("addr", config.HTTP.Listen).Info("HTTPS server up and running")
@@ -325,7 +325,7 @@ func client(config *clientConfig) {
 						}
 					})
 				if err != nil {
-					logrus.WithField("error", err).Fatal("Failed to initialize TCP relay")
+					logrus.WithField("error", err).Error("Failed to initialize TCP relay")
 				}
 				logrus.WithField("addr", tcpr.Listen).Info("TCP relay up and running")
 				errChan <- rl.ListenAndServe()
@@ -364,7 +364,7 @@ func client(config *clientConfig) {
 						}
 					})
 				if err != nil {
-					logrus.WithField("error", err).Fatal("Failed to initialize UDP relay")
+					logrus.WithField("error", err).Error("Failed to initialize UDP relay")
 				}
 				logrus.WithField("addr", udpr.Listen).Info("UDP relay up and running")
 				errChan <- rl.ListenAndServe()
@@ -397,7 +397,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize TCP TProxy")
+				logrus.WithField("error", err).Error("Failed to initialize TCP TProxy")
 			}
 			logrus.WithField("addr", config.TCPTProxy.Listen).Info("TCP TProxy up and running")
 			errChan <- rl.ListenAndServe()
@@ -429,7 +429,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize UDP TProxy")
+				logrus.WithField("error", err).Error("Failed to initialize UDP TProxy")
 			}
 			logrus.WithField("addr", config.UDPTProxy.Listen).Info("UDP TProxy up and running")
 			errChan <- rl.ListenAndServe()
@@ -461,7 +461,7 @@ func client(config *clientConfig) {
 					}
 				})
 			if err != nil {
-				logrus.WithField("error", err).Fatal("Failed to initialize TCP Redirect")
+				logrus.WithField("error", err).Error("Failed to initialize TCP Redirect")
 			}
 			logrus.WithField("addr", config.TCPRedirect.Listen).Info("TCP Redirect up and running")
 			errChan <- rl.ListenAndServe()
@@ -469,7 +469,7 @@ func client(config *clientConfig) {
 	}
 
 	err := <-errChan
-	logrus.WithField("error", err).Fatal("Client shutdown")
+	logrus.WithField("error", err).Error("Client shutdown")
 }
 
 func parseClientConfig(cb []byte) (*clientConfig, error) {
diff --git a/cmd/completion.go b/cmd/completion.go
index ea6bbed..8d1ff78 100644
--- a/cmd/completion.go
+++ b/cmd/completion.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"fmt"
diff --git a/cmd/config.go b/cmd/config.go
index 8de68ea..b519173 100644
--- a/cmd/config.go
+++ b/cmd/config.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"errors"
diff --git a/cmd/config_test.go b/cmd/config_test.go
index 11006ba..6966ceb 100644
--- a/cmd/config_test.go
+++ b/cmd/config_test.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import "testing"
 
diff --git a/cmd/kploader.go b/cmd/kploader.go
index b71b3d0..8d6fced 100644
--- a/cmd/kploader.go
+++ b/cmd/kploader.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"crypto/tls"
diff --git a/cmd/main.go b/cmd/main.go
index bd53a30..d2f1dcc 100644
--- a/cmd/main.go
+++ b/cmd/main.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"fmt"
@@ -32,6 +32,9 @@ var (
 	appDate    = "Unknown"
 )
 
+// channel so we can exit gracefully
+var sigChan = make(chan os.Signal, 1)
+
 var rootCmd = &cobra.Command{
 	Use:     "hysteria",
 	Long:    fmt.Sprintf("%s%s\n\nVersion:\t%s\nBuildDate:\t%s\nCommitHash:\t%s\nAuthors:\t%s", logo, desc, appVersion, appDate, appCommit, authors),
@@ -80,6 +83,8 @@ var clientCmd = &cobra.Command{
 	Short:   "Run as client mode",
 	Example: "./hysteria client --config /etc/hysteria/client.json",
 	Run: func(cmd *cobra.Command, args []string) {
+		signal.Notify(sigChan, syscall.SIGTERM)
+
 		cbs, err := ioutil.ReadFile(viper.GetString("config"))
 		if err != nil {
 			logrus.WithFields(logrus.Fields{
@@ -176,6 +181,40 @@ func init() {
 	viper.AutomaticEnv()
 }
 
-func main() {
-	cobra.CheckErr(rootCmd.Execute())
+// func main() {
+// 	cobra.CheckErr(rootCmd.Execute())
+// }
+
+func Start(configJson *[]byte) {
+	// init code from rootCmd
+	rand.Seed(time.Now().UnixNano())
+	// log config
+	logrus.SetOutput(os.Stdout)
+	// XXX: 
+	logrus.SetLevel(logrus.ErrorLevel)
+
+	logrus.SetFormatter(&nested.Formatter{
+		FieldsOrder: []string{
+			"version", "url",
+			"config", "file", "mode",
+			"addr", "src", "dst", "session", "action",
+			"retry", "interval",
+			"code", "msg", "error",
+		},
+		TimestampFormat: viper.GetString("log-timestamp"),
+	})
+
+	// client mode
+	cc, err := parseClientConfig(*configJson)
+	if err != nil {
+		logrus.WithFields(logrus.Fields{
+			"error": err,
+		}).Fatal("Failed to parse client configuration")
+	}
+	client(cc)
+}
+
+func Stop() {
+	logrus.Info("synthesizing SIGTERM because of explicit Stop call")
+	sigChan <- syscall.SIGTERM
 }
diff --git a/cmd/mmdb.go b/cmd/mmdb.go
index 1370959..91f30ab 100644
--- a/cmd/mmdb.go
+++ b/cmd/mmdb.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"github.com/oschwald/geoip2-golang"
diff --git a/cmd/resolver.go b/cmd/resolver.go
index f60442d..4a6921c 100644
--- a/cmd/resolver.go
+++ b/cmd/resolver.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"context"
diff --git a/cmd/server.go b/cmd/server.go
index 5334ac2..d52bb3a 100644
--- a/cmd/server.go
+++ b/cmd/server.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"crypto/tls"
diff --git a/cmd/update.go b/cmd/update.go
index b972f3b..922042c 100644
--- a/cmd/update.go
+++ b/cmd/update.go
@@ -1,4 +1,4 @@
-package main
+package hysteria
 
 import (
 	"encoding/json"
