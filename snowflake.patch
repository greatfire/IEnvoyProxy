diff --git a/client/snowflake.go b/client/snowflake.go
index 7568c4e..32a4c25 100644
--- a/client/snowflake.go
+++ b/client/snowflake.go
@@ -1,9 +1,7 @@
 // Client transport plugin for the Snowflake pluggable transport.
-package main
+package snowflakeclient
 
 import (
-	"flag"
-	"fmt"
 	"io"
 	"io/ioutil"
 	"log"
@@ -38,6 +36,8 @@ func (p ptEventLogger) OnNewSnowflakeEvent(e event.SnowflakeEvent) {
 	pt.Log(pt.LogSeverityNotice, e.String())
 }
 
+var sigChan = make(chan os.Signal, 1)
+
 // Exchanges bytes between two ReadWriters.
 // (In this case, between a SOCKS connection and a snowflake transport conn)
 func copyLoop(socks, sfconn io.ReadWriter) {
@@ -148,30 +148,14 @@ func socksAcceptLoop(ln *pt.SocksListener, config sf.ClientConfig, shutdown chan
 	}
 }
 
-func main() {
-	iceServersCommas := flag.String("ice", "", "comma-separated list of ICE servers")
-	brokerURL := flag.String("url", "", "URL of signaling broker")
-	frontDomain := flag.String("front", "", "front domain")
-	ampCacheURL := flag.String("ampcache", "", "URL of AMP cache to use as a proxy for signaling")
-	logFilename := flag.String("log", "", "name of log file")
-	logToStateDir := flag.Bool("log-to-state-dir", false, "resolve the log file relative to tor's pt state dir")
-	keepLocalAddresses := flag.Bool("keep-local-addresses", false, "keep local LAN address ICE candidates")
-	unsafeLogging := flag.Bool("unsafe-logging", false, "prevent logs from being scrubbed")
-	max := flag.Int("max", DefaultSnowflakeCapacity,
-		"capacity for number of multiplexed WebRTC peers")
-	versionFlag := flag.Bool("version", false, "display version info to stderr and quit")
-
-	// Deprecated
-	oldLogToStateDir := flag.Bool("logToStateDir", false, "use -log-to-state-dir instead")
-	oldKeepLocalAddresses := flag.Bool("keepLocalAddresses", false, "use -keep-local-addresses instead")
-
-	flag.Parse()
-
-	if *versionFlag {
-		fmt.Fprintf(os.Stderr, "snowflake-client %s", version.ConstructResult())
-		os.Exit(0)
+func Start(port *int, iceServersCommas, brokerURL, frontDomain, ampCacheURL, logFilename *string, logToStateDir, keepLocalAddresses, unsafeLogging *bool, max *int) {
+	if *max < DefaultSnowflakeCapacity {
+		*max = DefaultSnowflakeCapacity
 	}
 
+	oldLogToStateDir := logToStateDir
+	oldKeepLocalAddresses := keepLocalAddresses
+
 	log.SetFlags(log.LstdFlags | log.LUTC)
 
 	// Don't write to stderr; versions of tor earlier than about 0.3.5.6 do
@@ -232,7 +216,7 @@ func main() {
 		switch methodName {
 		case "snowflake":
 			// TODO: Be able to recover when SOCKS dies.
-			ln, err := pt.ListenSocks("tcp", "127.0.0.1:0")
+			ln, err := pt.ListenSocks("tcp", net.JoinHostPort("127.0.0.1", strconv.Itoa(*port)))
 			if err != nil {
 				pt.CmethodError(methodName, err.Error())
 				break
@@ -247,7 +231,6 @@ func main() {
 	}
 	pt.CmethodsDone()
 
-	sigChan := make(chan os.Signal, 1)
 	signal.Notify(sigChan, syscall.SIGTERM)
 
 	if os.Getenv("TOR_PT_EXIT_ON_STDIN_CLOSE") == "1" {
@@ -274,3 +257,8 @@ func main() {
 	wg.Wait()
 	log.Println("snowflake is done.")
 }
+
+func Stop() {
+	log.Println("synthesizing SIGTERM because of explicit Stop call")
+	sigChan <- syscall.SIGTERM
+}
diff --git a/proxy/lib/snowflake.go b/proxy/lib/snowflake.go
index 352c6e7..9894fd5 100644
--- a/proxy/lib/snowflake.go
+++ b/proxy/lib/snowflake.go
@@ -132,6 +132,7 @@ type SnowflakeProxy struct {
 	ProxyType       string
 	EventDispatcher event.SnowflakeEventDispatcher
 	shutdown        chan struct{}
+	ClientConnectedCallback    func()
 }
 
 // Checks whether an IP address is a remote address for the client
@@ -551,6 +552,8 @@ func (sf *SnowflakeProxy) runSession(sid string) {
 	select {
 	case <-dataChan:
 		log.Println("Connection successful.")
+		go sf.ClientConnectedCallback()
+
 	case <-time.After(dataChannelTimeout):
 		log.Println("Timed out waiting for client to open data channel.")
 		if err := pc.Close(); err != nil {
