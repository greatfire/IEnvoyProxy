 envoy/v2ray.go | 294 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 294 insertions(+)

diff --git a/envoy/v2ray.go b/envoy/v2ray.go
new file mode 100644
index 00000000..6a153e8c
--- /dev/null
+++ b/envoy/v2ray.go
@@ -0,0 +1,294 @@
+package v2ray
+
+// copied and modified from main/commands/run.go
+
+// feeding core.LoadConfig with a string reader containing the config
+// JSON seems the simplest way to run v2ray as a library
+//
+// Golang's JSON support seems a little cumbersome for a couple
+// string substitutions in a complex JSON snippet, so we just
+// use fmt.Sprintf to assemble the config
+//
+// The JSON file we build should look similar to the client example config
+// (that will be) documented here:
+// https://gitlab.com/stevenmcdonald/envoy-proxy-examples/v2ray/
+
+// We provide functions for starting and stopping several client services
+// indpenedently. Unfortunately you can't start them all and tell v2ray to
+// use the one that works... but that's what Envoy is good at.
+
+import (
+	"fmt"
+	"os"
+	"os/signal"
+	"strings"
+	"syscall"
+
+	core "github.com/v2fly/v2ray-core/v5"
+	_ "github.com/v2fly/v2ray-core/v5/main/distro/all"
+)
+
+var osWsSignals = make(chan os.Signal, 1)
+var osWechatSignals = make(chan os.Signal, 1)
+var osSrtpSignals = make(chan os.Signal, 1)
+
+// getInbound
+//
+// @param port - port to listen for SOCKS5 connections
+//
+func getInbound(clientPort *string) string {
+	inbound := fmt.Sprintf(`
+  {
+    "port": %s,
+    "protocol": "socks",
+    "sniffing": {
+      "enabled": true,
+      "destOverride": ["http", "tls"]
+    },
+    "settings": {
+      "auth": "noauth"
+    }
+  }`, *clientPort)
+
+	return inbound
+}
+
+func getWsConfig(clientPort, serverAddress, serverWsPort, wsPath, id *string) string {
+
+	inbound := getInbound(clientPort)
+
+	jsonConfig := fmt.Sprintf(`
+  {
+    "log": {
+      "loglevel": "error"
+    },
+    "inbounds": [
+      %s
+    ],
+    "outbounds": [
+      {
+        "protocol": "vmess",
+        "settings": {
+          "vnext": [
+            {
+              "address": "%s",
+              "port": %s,
+              "users": [
+                {
+                  "id": "%s",
+                  "alterId": 0
+                }
+              ]
+            }
+          ]
+        },
+        "streamSettings": {
+          "network": "ws",
+          "security": "tls",
+          "wsSettings": {
+            "path": "%s"
+          }
+        }
+      }
+    ]
+  }`, inbound, *serverAddress, *serverWsPort, *id, *wsPath)
+
+	return jsonConfig
+}
+
+// getQUICConfig
+//
+// @param clientPort - port to listen on for SOCKS5 connections
+//
+// @param serverAddress - server address to connect to
+//
+// @param serverPort - server port to connect to
+//
+// @oaram type - type of QUIC obfuscation, should be "srtp" or "wechat-video"
+func getQuicConfig(clientPort, serverAddress, serverPort, quicType, id *string) string {
+
+	inbound := getInbound(clientPort)
+
+	jsonConfig := fmt.Sprintf(`
+  {
+    "log": {
+      "loglevel": "error"
+    },
+    "inbounds": [
+      %s
+    ],
+    "outbounds": [
+      {
+        "protocol": "vmess",
+        "settings": {
+          "vnext": [
+            {
+              "address": "%s",
+              "port": %s,
+              "users": [
+                {
+                  "id": "%s",
+                  "alterId": 0
+                }
+              ]
+            }
+          ]
+        },
+        "streamSettings": {
+          "network": "quic",
+          "quicSettings": {
+            "security": "aes-128-gcm",
+            "header": {
+              "type": "%s"
+            },
+            "key": "0"
+          }
+        }
+      }
+    ]
+  }`, inbound, *serverAddress, *serverPort, *id, *quicType)
+
+	return jsonConfig
+}
+
+// StartWs - start v2ray, websocket transport
+//
+// @param clientPort - client SOCKS port routed to the WS server
+//
+// @param serverAddress - IP or hostname of the server
+//
+// @param serverPort - port of the websocket server (probably 443)
+//
+// @param wsPath - path to the websocket on the server
+//
+// @param id - UUID used to authenticate with the server
+//
+func StartWs(clientPort, serverAddress, serverPort, wsPath, id *string) error {
+	configJson := getWsConfig(clientPort, serverAddress, serverPort, wsPath, id)
+
+	// fmt.Println(configJSON)
+
+	reader := strings.NewReader(configJson)
+	clientConfig, err := core.LoadConfig(core.FormatJSON, reader)
+	if err != nil {
+		fmt.Println("error reading config: %s", err)
+		return err
+	}
+
+	server, err := core.New(clientConfig)
+	if err != nil {
+		fmt.Println("error creating server: %s", err)
+		return err
+	}
+
+	if err := server.Start(); err != nil {
+		fmt.Println("failed to start %s", err)
+	}
+
+	defer server.Close()
+
+	{
+		signal.Notify(osWsSignals, syscall.SIGTERM)
+		<-osWsSignals
+	}
+
+	return nil
+}
+
+func StopWs() {
+	osWsSignals <- syscall.SIGTERM
+}
+
+// StartSrtp - start v2ray, QUIC/SRTP transport
+//
+// @param clientPort - client SOCKS port routed to the WS server
+//
+// @param serverAddress - IP or hostname of the server
+//
+// @param serverPort - port of the websocket server (probably 443)
+//
+// @param id - UUID used to authenticate with the server
+//
+func StartSrtp(clientPort, serverAddress, serverPort, id *string) error {
+	quicType := "srtp"
+	configJson := getQuicConfig(clientPort, serverAddress, serverPort, &quicType, id)
+
+	// fmt.Println(configJson)
+
+	reader := strings.NewReader(configJson)
+	clientConfig, err := core.LoadConfig(core.FormatJSON, reader)
+	if err != nil {
+		fmt.Println("error reading config: %s", err)
+		return err
+	}
+
+	server, err := core.New(clientConfig)
+	if err != nil {
+		fmt.Println("error creating server: %s", err)
+		return err
+	}
+
+	if err := server.Start(); err != nil {
+		fmt.Println("failed to start %s", err)
+	}
+
+	defer server.Close()
+
+	{
+		signal.Notify(osWsSignals, syscall.SIGTERM)
+		<-osSrtpSignals
+	}
+
+	return nil
+}
+
+func StopSrtp() {
+	osSrtpSignals <- syscall.SIGTERM
+}
+
+// StartWechat - start v2ray, QUIC/Wechat-video transport
+//
+// @param clientPort - client SOCKS port routed to the WS server
+//
+// @param serverAddress - IP or hostname of the server
+//
+// @param serverPort - port of the websocket server (probably 443)
+//
+// @param id - UUID used to authenticate with the server
+//
+func StartWechat(clientPort, serverAddress, serverPort, id *string) error {
+	quicType := "wechat-video"
+	configJson := getQuicConfig(clientPort, serverAddress, serverPort, &quicType, id)
+
+	// fmt.Println(configJSON)
+
+	reader := strings.NewReader(configJson)
+	clientConfig, err := core.LoadConfig(core.FormatJSON, reader)
+	if err != nil {
+		fmt.Println("error reading config: %s", err)
+		return err
+	}
+
+	server, err := core.New(clientConfig)
+	if err != nil {
+		fmt.Println("error creating server: %s", err)
+		return err
+	}
+
+	if err := server.Start(); err != nil {
+		fmt.Println("failed to start %s", err)
+	}
+
+	defer server.Close()
+
+	{
+		signal.Notify(osWsSignals, syscall.SIGTERM)
+		<-osWechatSignals
+	}
+
+	return nil
+}
+
+func StopWechat() {
+	osWechatSignals <- syscall.SIGTERM
+}
